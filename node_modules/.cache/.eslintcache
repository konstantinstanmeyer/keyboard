[{"/Users/konstantinstanmeyer/Development/code/practices/keyboard/src/index.js":"1","/Users/konstantinstanmeyer/Development/code/practices/keyboard/src/App.js":"2","/Users/konstantinstanmeyer/Development/code/practices/keyboard/src/reportWebVitals.js":"3","/Users/konstantinstanmeyer/Development/code/practices/keyboard/src/Keyboard.js":"4","/Users/konstantinstanmeyer/Development/code/practices/keyboard/src/Test.js":"5"},{"size":535,"mtime":1665590750096,"results":"6","hashOfConfig":"7"},{"size":254,"mtime":1666205038143,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1665590750097,"results":"9","hashOfConfig":"7"},{"size":2951,"mtime":1665690627031,"results":"10","hashOfConfig":"7"},{"size":4008,"mtime":1666318996366,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1mzajcl",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/konstantinstanmeyer/Development/code/practices/keyboard/src/index.js",[],[],[],"/Users/konstantinstanmeyer/Development/code/practices/keyboard/src/App.js",[],[],"/Users/konstantinstanmeyer/Development/code/practices/keyboard/src/reportWebVitals.js",[],[],"/Users/konstantinstanmeyer/Development/code/practices/keyboard/src/Keyboard.js",[],[],"/Users/konstantinstanmeyer/Development/code/practices/keyboard/src/Test.js",["29","30","31"],[],"import React, { useEffect, useState } from \"react\";\nimport uuid from 'react-uuid';\nimport Keyboard from \"./Keyboard\";\n\nexport default function Test(){\n    const words = [\"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\"]\n    const [blur, setBlur] = useState(false)\n    const [inputValue, setInputValue] = useState(\"\")\n    const [gameState, setGameState] = useState(\"not started\")\n    const inputField = document.querySelector(\"#typeInput\");\n    const [keyDown, setKeyDown] = useState(0)\n\n    function iterate(word){\n        let letters = []\n        for (let i = 0; i < word.length; i++) {\n            letters.push(<letter key={uuid()} id={i} className=\"text-2xl font-mono\">{word[i]}</letter>)\n        }\n        return letters;\n    }\n\n    function createWords(words, wordIndex){\n        return(\n            <div key={wordIndex} id={wordIndex} className=\"pl-2 h-8\">\n                {iterate(words)}\n            </div>\n        )\n    }\n\n    function noInput(){\n        setBlur(true)\n    }\n\n    let textTimer;\n\n    // useEffect(() => {\n    //     if (gameState == \"not started\"){\n    //         textTimer = window.setTimeout(noInput, 3000)\n    //     }\n    // }, [keyDown])\n\n    if (gameState === \"not started\"){\n        textTimer = window.setTimeout(noInput, 3000)\n    }\n\n    useEffect(() => {\n        if(gameState === \"not started\" && inputValue !== \"\") {\n            setGameState(\"started\")\n        } else if (gameState === \"started\") {\n            \n        }\n    }, [inputValue])\n\n    window.addEventListener('keydown', ({code}) => {\n        let button = document.querySelector(`#${code.charAt(code.length-1).toLowerCase()}`)\n        button.classList.remove('text-emerald-500')\n        button.classList.remove('bg-sky-900')\n        button.classList.add('bg-emerald-500')\n        button.classList.add('text-sky-900')\n    })\n\n    window.addEventListener('keyup', e => {\n        let button = document.querySelector(`#${e.code.charAt(e.code.length-1).toLowerCase()}`);\n        button.classList.remove('bg-emerald-500');\n        button.classList.remove('text-sky-900');\n        button.classList.add('bg-sky-900');\n        button.classList.add('text-emerald-500');\n        let focus = document.querySelector(\"#typeInput\");\n        setBlur(false);\n        focus.focus();\n        clearTimeout(textTimer);\n    })\n\n    // function validateInput(input){\n    //     let master = words\n    //     if(input !== \"\"){\n    //         switch(input){\n    //             case input.length == 1 && input.charAt(input.length -1) !== \" \":\n    //                 input == master[0][0] ? null : null\n                    \n    //                 break;\n    //             case input.length == 2 && input.charAt(input.length - 1) !== \" \":\n    //                 input\n\n    //                 break;\n    //             // case input.charAt(-1) === \" \"\n    //         }\n    //     }\n    // }\n\n    function iterateWords(words){\n        let wordsList = []\n        for (let i = 0; i < words.length; i++){\n            wordsList.push(createWords(words[i], i))\n        }\n        return wordsList;\n    }\n\n    return (\n        <div className=\"w-1/3 h-32 ml-2 pt-3\">\n            <div id=\"test-zone\" className={`overflow-hidden h-24 bg-emerald-600 rounded-lg ${blur ? 'blur-sm transition duration-300' : null} relative`} onClick={() => inputField.focus()}>\n                <input id=\"typeInput\" autoFocus className=\"absolute z-10\" onFocus={() => setBlur(false)} onBlur={() => setBlur(true)} value={inputValue} onChange={(e) => setInputValue(e.target.value)}/>\n                <div id=\"text-area\" className=\"flex flex-wrap z-0 absolute\">{iterateWords(words)}\n                </div>\n            </div>\n            {blur ? <p className=\"absolute\">press any button to refocus</p> : null}\n            <Keyboard />\n            {gameState}\n        </div>\n    )\n}",{"ruleId":"32","severity":1,"message":"33","line":11,"column":12,"nodeType":"34","messageId":"35","endLine":11,"endColumn":19},{"ruleId":"32","severity":1,"message":"36","line":11,"column":21,"nodeType":"34","messageId":"35","endLine":11,"endColumn":31},{"ruleId":"37","severity":1,"message":"38","line":51,"column":8,"nodeType":"39","endLine":51,"endColumn":20,"suggestions":"40"},"no-unused-vars","'keyDown' is assigned a value but never used.","Identifier","unusedVar","'setKeyDown' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gameState'. Either include it or remove the dependency array.","ArrayExpression",["41"],{"desc":"42","fix":"43"},"Update the dependencies array to be: [gameState, inputValue]",{"range":"44","text":"45"},[1659,1671],"[gameState, inputValue]"]